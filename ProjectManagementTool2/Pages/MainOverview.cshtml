@page
@using ProjectManagementTool.Models
@using ProjectManagementTool.Models.NonBasicModels
@using Task = ProjectManagementTool.Models.Task
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using ProjectManagementTool.DAL.Repositories
@model MainOverviewModel
@{
	ViewData["Title"] = "Main overview";
	Layout = null;
	TaskRepository taskRepository = new TaskRepository();
	GoalRepository goalRepository = new GoalRepository();
	ProjectRepository projectRepository = new ProjectRepository();
	EmployeeRepository employeeRepository = new EmployeeRepository();
}

<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>@ViewData["Title"] - ProjectManagementTool</title>
	<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
	<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
	<link rel="stylesheet" href="~/ProjectManagementTool.styles.css" asp-append-version="true" />
</head>

<body>
<div class="container-fluid h-100 pt-2 pb-2">
	<div class="container-fluid border m-0" id="navWrap" style="height: 10%">
		<nav class="navbar navbar-expand-lg bg-body-tertiary">
			<div class="container-fluid">
				<a class="navbar-brand" href="#">Navbar</a>
				<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
					<span class="navbar-toggler-icon"></span>
				</button>
				<div class="collapse navbar-collapse" id="navbarSupportedContent">
					<ul class="navbar-nav me-auto mb-2 mb-lg-0">
						<li class="nav-item">
							<a class="nav-link active" aria-current="page" href="#">Home</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="#">Link</a>
						</li>
						<li class="nav-item dropdown">
							<a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
								Dropdown
							</a>
							<ul class="dropdown-menu">
								<li><a class="dropdown-item" href="#">Action</a></li>
								<li><a class="dropdown-item" href="#">Another action</a></li>
								<li><hr class="dropdown-divider"></li>
								<li><a class="dropdown-item" href="#">Something else here</a></li>
							</ul>
						</li>
						<li class="nav-item">
							<a class="nav-link disabled" aria-disabled="true">Disabled</a>
						</li>
					</ul>
					<form class="d-flex" role="search">
						<input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
						<button class="btn btn-outline-success" type="submit">Search</button>
					</form>
				</div>
			</div>
		</nav>
	</div>

	<div class="container-fluid p-2" style="height: 80%">
		<div class="d-flex flex-row h-100 gap-2">
			<div class="d-flex flex-column w-25 gap-2">
				<div class="h-50 border p-2 gap-2" id="tasks">
					@{
						try
						{
							if (Guid.TryParse(HttpContext.Session.GetString("UserId"), out Guid tUserId)) //TODO logic layer stuffs
							{
								var tasksViewModel = new TasksViewModel
								{
									tasks = taskRepository.GetEmployeeTasks(tUserId).ToList()
								};

								<div class="container-fluid">@await Html.PartialAsync("Shared/TasksView", tasksViewModel)</div>
							}
							else
							{
								<p>Error: Unable to parse UserId</p>
							}
						}
						catch (Exception ex)
						{
							<p>Error: @ex.Message</p>
						}
					}
				</div>


				<div class="h-50 border p-2 gap-2" id="deadlines"> Have another long hard think about what to put here. Originally destined for deadlines however that turned out to be a bad idea since those are displayed below projects.  </div>
			</div>
			<div class="d-flex flex-column w-75 gap-2">
			<div class="h-25 border p-2 gap-2" id="Goal"> 
			@await Html.PartialAsync("Shared/GoalView", new Goal //TODO logic layer stuffs
					{
						guid = Guid.NewGuid(),
						completionPercentage = 15,
						projectGuid = Guid.NewGuid(),
						tasks = new List<Task>
						{
							new Task
							{
								deadline = DateTime.Now,
								description = "This is a dummy description used for testing, please let me know if you see this after the testing phase since you shouldn't be seeing this.",
								isNew = true,
								title = "Task #1",
								guid = Guid.NewGuid()

							},
							new Task
							{
								deadline = DateTime.Now,
								description = "This is a dummy description used for testing, please let me know if you see this after the testing phase since you shouldn't be seeing this.",
								isNew = true,
								title = "Task #2",
								guid = Guid.NewGuid()

							}
						} // !TODO Add functionality so this part can be rendered based on GUID retrieved by project currently selected
					})
			</div>
				<div class="h-75 border p-2 gap-2" id="projects">
					@{ //TODO logic layer stuffs
						try
						{
							if (Guid.TryParse(HttpContext.Session.GetString("UserId"), out Guid pUserId))
							{
								var projectsViewModel = new Projects
								{
									projects = projectRepository.GetEmployeeProjects(pUserId).ToList()
								};

								<div class="container-fluid">@await Html.PartialAsync("Shared/ProjectsView", projectsViewModel)</div>
							}
							else
							{
								var projectsViewModel = new Projects
								{
									projects = null
								};

								<div class="container-fluid">@await Html.PartialAsync("Shared/ProjectsView", projectsViewModel)</div>
							}
						}
						catch (Exception ex)
						{
							<p>Error: @ex.Message</p>
						}
					}
				</div>

			</div>
		</div>
	</div>

	<div class="border align-content-center" style="height: 10%">
		<h3>@HttpContext.Session.GetString("UserId")	</h3>
	</div>

</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>

</body>